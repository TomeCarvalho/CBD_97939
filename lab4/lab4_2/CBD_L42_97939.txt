// NMEC: 97939

#1
MATCH (actor:Person)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person)
RETURN actor.name, movie.title

#2
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)
WHERE movie.released > 2005
RETURN movie, collect(actor)

#3
MATCH (node1)-[relation]-(node2)
WITH node1, node2, COUNT(relation) AS n_relations
WHERE n_relations > 1 AND ID(node1) < ID(node2)
RETURN node1, node2

// The ID(node1) < ID(node2) condition removes repetition. 
// For example, the pair (5, 121) is the same as (121, 5). With this, only (5, 121) will be in the results.

#4
MATCH (person1:Person)-[:REVIEWED]->(movie:Movie)<-[:REVIEWED]-(person2:Person)
WHERE ID(person1) < ID(person2)
RETURN movie.title, person1.name, person2.name

#5
MATCH (actor1:Person)-[:ACTED_IN]->(movie:Movie)<-[:ACTED_IN]-(actor2:Person)
WITH actor1, actor2, COUNT(movie) AS n_movies
WHERE ID(actor1) < ID(actor2) AND n_movies > 1
RETURN actor1, actor2

#6
MATCH (actor:Person)-[:ACTED_IN]->(apollo13:Movie {title: "Apollo 13"})
WITH AVG(apollo13.released - actor.born) AS avg_release_age
RETURN avg_release_age

#7
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)
WITH movie, AVG(movie.released - actor.born) AS avg_cast_age
RETURN movie, ROUND(avg_cast_age, 2)
ORDER BY avg_cast_age DESC
LIMIT 10

#8
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)
WITH movie AS movie, AVG(movie.released - actor.born) AS avg_cast_age
ORDER BY avg_cast_age
LIMIT 1
MATCH subgraph = ()-[:ACTED_IN]->(movie)
RETURN subgraph

#9
MATCH (cusack:Person {name: "John Cusack"}),
      (moore:Person {name: "Demi Moore"}),
      p = shortestPath((cusack)-[*]-(moore))
RETURN p

#10
MATCH (reeves:Person {name: "Keanu Reeves"}),
      (cruise:Person {name: "Tom Cruise"}),
      p = shortestPath((reeves)-[*]-(cruise))
RETURN length(p)

#11
MATCH p = shortestPath((jim:Person)-[*]-(kevin:Person))
WHERE jim.name CONTAINS "Jim" and kevin.name CONTAINS "Kevin"
RETURN p, length(p)
ORDER BY length(p)
LIMIT 1

#12
MATCH p = shortestPath((cash:Person {name: "Jim Cash"})-[*]-(person:Person))
WHERE person <> cash
WITH person, length(p) AS distance
WHERE distance = 2
RETURN person

#13
MATCH p = shortestPath((bacon:Person {name: "Kevin Bacon"})-[*]-(person:Person))
WHERE person <> bacon
WITH length(p) AS distance
RETURN distance
ORDER BY distance DESC
LIMIT 1

#14
MATCH p = shortestPath((p1:Person)-[*]-(p2:Person))
WHERE p1 <> p2
WITH length(p) AS distance
RETURN distance
ORDER BY distance DESC
LIMIT 1

#15
MATCH p = shortestPath((p1:Person)-[*]-(p2:Person))
WHERE ID(p1) < ID(p2)
WITH p1, p2, p, length(p) AS distance
ORDER BY distance
RETURN distance, count(distance)

// ID(p1) < ID(p2) used to remove duplicate pairs already ensures p1 <> p2

#16
MATCH p = shortestPath((p1:Person)-[:ACTED_IN*]-(p2:Person))
WHERE p1 <> p2
WITH p1, length(p) AS distance
RETURN p1, AVG(distance) AS avg_distance
ORDER BY avg_distance
LIMIT 10

#17. Encontre todos os atores que atuaram em filmes dirigidos por James L. Brooks
MATCH (actor:Person)-[:ACTED_IN]->(Movie)<-[:DIRECTED]-(Person {name: "James L. Brooks"})
RETURN actor

#18. Encontre todos os atores que eram menores de idade quando atuaram em filmes, bem como o respetivo filme e idade
MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)
WITH actor, movie, (movie.released - actor.born) AS release_age
WHERE release_age < 18
RETURN actor, movie, release_age

#19. Encontre todos os seguidores de pessoas que fizeram revisões de pelo menos 3 filmes
MATCH (follower:Person)-[f:FOLLOWS]->(reviewer:Person)-[r:REVIEWED]->(Movie)
WITH follower, f, reviewer, COUNT(r) AS num_reviews
WHERE num_reviews >= 3
RETURN follower, f, reviewer

#20. Atribua aos filmes que foram reviewed um score, calculado através da média do rating das suas reviews. Ordene-los por rating, por ordem decrescente.
MATCH ()-[review:REVIEWED]->(movie:Movie)
RETURN movie, ROUND(AVG(review.rating)) AS score
ORDER BY score DESC